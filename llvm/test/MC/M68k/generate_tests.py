#!/usr/bin/env python3

from dataclasses import dataclass
from typing import Generator


@dataclass
class InstructionEncoding:
    mnemonics: str
    bytes: list[int]


# https://m680x0.github.io/ref/M68000PM_AD_Rev_1_Programmers_Reference_Manual_1992.html
# Section 8.2 Operation Code Map


def ori() -> Generator[InstructionEncoding]:
    yield InstructionEncoding("or.b #0, %d0", [0x00, 0x00, 0x00, 0x00])


def instruction_encodings() -> Generator[InstructionEncoding]:
    return ori()


def write_header(f):
    header: list[str] = [
        "; Generated by llvm/test/MC/M68k/generate_tests.py\n",
        "; Please do not edit this file by hand.\n",
        "\n",
        "; RUN: llvm-mc -triple=m68k -mcpu=M68040 -show-encoding < %s | FileCheck %s\n",
    ]

    for line in header:
        f.write(line)


def byte_to_hex(byte: int) -> str:
    return f"{byte:#04x}"


def write_encoding(f, encoding: InstructionEncoding):
    bytes = ",".join(map(byte_to_hex, encoding.bytes))
    f.write(f"; CHECK:      {encoding.mnemonics}\n")
    f.write(f"; CHECK-SAME: encoding: [{bytes}]\n")
    f.write(f"{encoding.mnemonics}\n")


def write_encodings(f):
    for encoding in instruction_encodings():
        f.write("\n")
        write_encoding(f, encoding)


with open("generated.s", "w") as f:
    write_header(f)
    write_encodings(f)
