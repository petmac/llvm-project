#!/usr/bin/env python3

from abc import ABC, abstractmethod
from dataclasses import dataclass
from typing import Generator


# https://m680x0.github.io/ref/M68000PM_AD_Rev_1_Programmers_Reference_Manual_1992.html
# Section 8.2 Operation Code Map

# http://goldencrystal.free.fr/M68kOpcodes-v2.3.pdf


# Instructions


class Instruction(ABC):
    def supported(self) -> bool:
        return True

    @abstractmethod
    def asm(self) -> str:
        pass

    @abstractmethod
    def bytes(self) -> bytes:
        pass


@dataclass
class ORIToCCR(Instruction):
    value: int

    def supported(self) -> bool:
        return False

    def asm(self) -> str:
        return "or.b #0, %ccr"

    def bytes(self) -> bytes:
        return [0b0000_000_1, 0b00_111_100, 0, 0]


def instructions() -> Generator[Instruction]:
    return [ORIToCCR(123)]


# Encodings


@dataclass
class InstructionEncoding:
    supported: bool
    asm: str
    bytes: bytes


def instruction_encodings() -> Generator[InstructionEncoding]:
    for instruction in instructions():
        yield InstructionEncoding(
            instruction.supported, instruction.asm(), instruction.bytes()
        )


def write_header(f):
    header: list[str] = [
        "; Generated by llvm/test/MC/M68k/generate_tests.py\n",
        "; Please do not edit this file by hand.\n",
        "\n",
        "; RUN: llvm-mc -triple=m68k -mcpu=M68040 -show-encoding < %s | FileCheck %s\n",
    ]

    for line in header:
        f.write(line)


def byte_to_hex(byte: int) -> str:
    return f"{byte:#04x}"


def write_encoding(f, encoding: InstructionEncoding):
    check = "CHECK" if encoding.supported() else "SKIP"
    comment_out = "" if encoding.supported() else "; "
    bytes = ",".join(map(byte_to_hex, encoding.bytes))
    f.write(f"; {check}:      {encoding.asm}\n")
    f.write(f"; {check}-SAME: encoding: [{bytes}]\n")
    f.write(f"{comment_out}{encoding.asm}\n")


def write_encodings(f):
    for encoding in instruction_encodings():
        f.write("\n")
        write_encoding(f, encoding)


with open("generated.s", "w") as f:
    write_header(f)
    write_encodings(f)
